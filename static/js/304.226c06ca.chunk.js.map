{"version":3,"file":"static/js/304.226c06ca.chunk.js","mappings":"kNAEaA,EAAYC,EAAAA,EAAAA,GAAH,0GAQTC,EAASD,EAAAA,EAAAA,GAAH,oNAaNE,EAAWF,EAAAA,EAAAA,GAAH,ykB,SCfRG,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,SAAAC,GAAK,OACf,SAACP,EAAD,WACE,UAAC,KAAD,CAAMQ,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,WACE,gBACEQ,IACEL,EAAMM,YAAN,yCACsCN,EAAMM,aACxC,4DAENC,IAAKP,EAAMQ,MACXC,MAAM,SAER,SAACf,EAAD,UAAWM,EAAMQ,YAXRR,EAAME,GADJ,KAkBtB,C,uIC7BYQ,E,OAAYlB,EAAAA,GAAH,2X,mCCKP,SAASmB,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAeiB,EAAf,KACA,GAA4BD,EAAAA,EAAAA,WAAS,GAArC,eAAOE,EAAP,KAAeC,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEyBC,EAAAA,EAAAA,MAFzB,YAEUrB,EAFV,SAIoC,IAAlBA,EAAOsB,OAJzB,0CAKaC,EAAAA,EAAAA,IAAM,2BALnB,OAOIN,EAAUjB,GAPd,gDASIwB,QAAQC,IAAR,MATJ,yBAWIN,GAAU,GAXd,6EADc,uBAAC,WAAD,wBAgBdO,EACD,GAAE,KAGD,6BACE,SAACZ,EAAD,6BACCd,IAAU,SAACD,EAAA,EAAD,CAAWC,OAAQA,IAC7BkB,IAAU,SAACS,EAAA,EAAD,MAGhB,C,+LCnCKC,EAAW,gCACXC,EAAU,mCAEHR,EAAmB,mCAAG,oGACVS,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sBAA2C,CAChEG,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJmB,cAC3BC,EAD2B,yBAQ1BA,EAASC,KAAKC,SARY,2CAAH,qDAWnBC,EAAkB,mCAAG,WAAM/B,GAAN,uFACTwB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BtB,GAAM,CACzDyB,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJkB,cAC1BC,EAD0B,yBAQzBA,EAASC,MARgB,2CAAH,sDAWlBG,EAAkB,mCAAG,WAAMhC,GAAN,uFACTwB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BtB,EAA9B,YAA4C,CACjEyB,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJkB,cAC1BC,EAD0B,yBAQzBA,EAASC,KAAKI,MARW,2CAAH,sDAWlBC,EAAkB,mCAAG,WAAMlC,GAAN,uFACTwB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA8BtB,EAA9B,YAA4C,CACjEyB,OAAQ,CACNC,QAASH,EACTI,SAAU,WAJkB,cAC1BC,EAD0B,yBAQzBA,EAASC,KAAKC,SARW,2CAAH,sDAWlBK,EAAiB,mCAAG,WAAMC,GAAN,uFACRZ,EAAAA,EAAAA,IAAA,UAAaF,EAAb,gBAAqC,CAC1DG,OAAQ,CACNC,QAASH,EACTI,SAAU,QACVS,MAAOA,KALoB,cACzBR,EADyB,yBASxBA,EAASC,KAAKC,SATU,2CAAH,qD","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListMovie = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 25px;\n\n  justify-content: center;\n`;\n\nexport const CardLi = styled.li`\n  text-align: center;\n\n  border-radius: 10px;\n\n  background-color: rgba(100, 43, 115, 1);\n  border: 2px solid rgba(100, 43, 115, 1);\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const NameFilm = styled.h3`\n  font-family: 'Kablammo', cursive;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 28px;\n\n  display: inline-block;\n  width: 200px;\n\n  text-decoration: none;\n\n  background-color: #f4d03f;\n  background-image: linear-gradient(132deg, #f4d03f 0%, #16a085 100%);\n\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n\n  &:hover {\n    background-color: #f4d03f;\n    background-image: linear-gradient(315deg, #f4d03f 0%, #16a085 100%);\n\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  ListMovie,\n  CardLi,\n  NameFilm,\n} from 'components/MovieList/MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ListMovie>\n      {movies.map(movie => (\n        <CardLi key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <img\n              src={\n                movie.poster_path\n                  ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                  : 'https://via.placeholder.com/278x417?text=Poster+Not+Found'\n              }\n              alt={movie.title}\n              width=\"250\"\n            />\n            <NameFilm>{movie.title}</NameFilm>\n          </Link>\n        </CardLi>\n      ))}\n    </ListMovie>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const HomeTitle = styled.h1`\n  font-size: 48px;\n  line-height: calc(14 / 48);\n\n  text-align: center;\n\n  padding: 35px;\n\n  background-color: #ff3cac;\n  background-image: linear-gradient(\n    225deg,\n    #ff3cac 0%,\n    #784ba0 50%,\n    #2b86c5 100%\n  );\n\n  text-shadow: 0px 0px 15px #2d25ce;\n\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`;\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { HomeTitle } from 'pages/Home/Home.styled';\nimport { fetchTrendingMovies } from 'services/moviesAPI';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Home() {\n  const [movies, setMovies] = useState([]);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    async function fetchListMovies() {\n      try {\n        const movies = await fetchTrendingMovies();\n\n        if (movies && movies.length === 0) {\n          return toast('Sorry, try again later');\n        }\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoader(false);\n      }\n    }\n\n    fetchListMovies();\n  }, []);\n\n  return (\n    <main>\n      <HomeTitle>Trending today</HomeTitle>\n      {movies && <MovieList movies={movies} />}\n      {loader && <Loader />}\n    </main>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'b5ec273f41ed5d13bd669af204d5b017';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchDetailsMovies = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchCreditsMovies = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data.cast;\n};\n\nexport const fetchReviewsMovies = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchSearchMovies = async query => {\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query: query,\n    },\n  });\n\n  return response.data.results;\n};\n"],"names":["ListMovie","styled","CardLi","NameFilm","MovieList","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","alt","title","width","HomeTitle","Home","useState","setMovies","loader","setLoader","useEffect","fetchTrendingMovies","length","toast","console","log","fetchListMovies","Loader","BASE_URL","API_KEY","axios","params","api_key","language","response","data","results","fetchDetailsMovies","fetchCreditsMovies","cast","fetchReviewsMovies","fetchSearchMovies","query"],"sourceRoot":""}